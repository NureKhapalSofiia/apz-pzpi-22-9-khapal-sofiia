Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії









Звіт
з лабораторної роботи №3
з дисципліни «Архітектура програмного забезпечення»









Виконала:                                                                             Перевірив:
ст. гр. ПЗПІ-22-9                                                                 Дашенков Д.С.
Хапаль С.Є.

Харків 2025
Тема: Web застосунок для системи по догляду за шкірою
Мета: розробити web застосунок для системи по догляду за шкірою

Структура проекту:
Проект побудований на основі React. Всі вихідні файли розміщено в директорії src, що є основною точкою входу для JavaScript/JSX-коду.
У папці src міститься підкаталог assets, який використовується для зберігання ресурсів. Всередині assets також є папки components та styles. components містить вайли з кодом усіх сторінок сайту, а styles - окремі CSS-файли для структурування стилів цих сторінок.
Файл App.jsx - це головний компонент програми, з якого починається побудова всього інтерфейсу. Він підключається в main.jsx, де виконується рендеринг React-компонента у DOM-елемент з id="root", що оголошений у index.html.

 
Рисунок 1 – Структура веб-сайту програмної системи

Приклад коду основних сторінок та елементів:
-	Сторінка авторизації у системі
Компонент LoginPage.jsx реалізує екран входу для користувача. Він створений як функціональний компонент з використанням React і хука useState. На початку файлу імпортуються необхідні залежності: React, сам хук useState, а також CSS-стилі з файлу login.css, який містить стилізацію форми.
Компонент приймає один параметр - функцію onLogin. Вона викликається після натискання на кнопку входу й відповідає за подальшу логіку авторизації
Для збереження введених користувачем даних створюються дві змінні стану - email і password, кожна з яких ініціалізується порожнім рядком. Зміни в полях вводяться за допомогою функцій setEmail та setPassword.
Функція handleSubmit викликається при спробі відправлення форми. Вона блокує стандартну поведінку браузера за допомогою e.preventDefault() і викликає передану зовні функцію onLogin, передаючи їй об’єкт з поточними значеннями електронної пошти та пароля.
У частині рендерингу формується верстка. Форма містить два поля введення: одне для електронної пошти, друге - для пароля. Обидва поля мають зв'язок із відповідними змінними стану і слухають подію onChange, яка оновлює стан при кожному введенні. Наприкінці форми розташована кнопка типу submit, яка запускає handleSubmit.
Нижче наведено сам код:

 
Рисунок 2 – Код сторінки авторизації

	Результат роботи коду:

 
Рисунок 3 – Сторінка авторизації

-	Сторінка з таблицею продукту
Компонент ProductsPage відповідає за відображення сторінки з косметичними засобами. Він побудований як функціональний React-компонент із використанням хуків useState, useEffect та навігації через useNavigate з react-router-dom.
На початку компонента оголошуються змінні стану: active зберігає назву активної вкладки в боковому меню, products - список отриманих продуктів, selectedProductId - ідентифікатор обраного рядка в таблиці. При першому рендері за допомогою useEffect виконується запит до API http://localhost:8000/api/products/, і отримані дані зберігаються у стан products. 
Функція handleEdit перевіряє, чи вибраний якийсь продукт. Якщо так - виконується перехід на сторінку редагування за допомогою navigate, додаючи до URL ідентифікатор продукту.
Функція handleDelete працює асинхронно. Спочатку перевіряється, чи є обраний продукт. Далі користувачу показується підтвердження на видалення. Якщо він підтверджує, виконується запит DELETE на відповідну API-ендпоінт. Якщо запит успішний, продукт видаляється з локального стану за допомогою filter, і вибір скидається.
У частині рендерингу створюється структура сторінки. Зліва розміщується бокове меню з чотирма пунктами: «Косметичні засоби», «Лікарі», «Пацієнти», «Акаунт». Активний пункт виділяється за допомогою класу active, і при натисканні змінюється стан active. При активному пункті «products» додатково рендеряться декоративні криві.
Справа знаходиться головна частина — content-block. У верхній панелі розміщено три кнопки: Додати, Редагувати, Видалити. Вони запускають відповідні функції navigate, handleEdit, handleDelete.
Нижче розташована таблиця з класом product-table, де виводяться всі продукти. Кожен рядок таблиці можна клікнути, щоб вибрати продукт. При цьому зберігається його id у стані, а сам рядок виділяється класом selected-row. Для кожного продукту в таблиці відображаються такі поля: ID, назва, бренд, опис, категорія, статус сертифікації, дата створення та дата останнього оновлення. Для дати використовується toLocaleString з українською локалізацією.
Нижче наведено сам код:

 
 
Рисунок 4 – Перша частина коду сторінки з таблицею «Продукти»
 
 
Рисунок 5 – Друга частина коду сторінки з таблицею «Продукти»
 
Рисунок 6 – Третя частина коду сторінки з таблицею «Продукти»

 
Рисунок 7 – Сторінка «Продукти»
-	Сторінка редагування 
Компонент EditProductPage відповідає за сторінку редагування існуючого продукту. Він приймає з URL параметр id через хук useParams, щоб знати, який саме запис потрібно підвантажити та відредагувати. Навігацію між сторінками реалізовано через хук useNavigate з react-router-dom: після успішного оновлення продукту користувача перекидає назад на список товарів.
В якості локального стану визначено п’ять змінних: name, brand, description, category і isCertified. Кожна з них ініціалізується як порожній рядок, а потім у useEffect підтягуються поточні дані продукту з бекенду. Запит здійснюється через бібліотеку axios.get, використовуючи URL видавництва API http://127.0.0.1:8000/api/products/${id}/. У відповіді повертається об’єкт із полями продукту: name, brand, description, category та is_certified. Отримані значення присвоюються відповідним сеттерам стану (setName, setBrand, setDescription, setCategory, setIsCertified).
Функція handleUpdate відповідає за відправку оновлених даних на сервер. Вона оголошена як асинхронна: за допомогою axios.put відправляємо на ендпоінт http://127.0.0.1:8000/api/products/${id}/update/ об’єкт із полями { name, brand, description, category, is_certified: isCertified}. Після успішного запиту виводиться повідомлення через alert("Продукт оновлено!"), і користувача перенаправляє на сторінку /products. Якщо сталася помилка оновлення, її текст відображається через alert("Сталася помилка!") і додається детальна інформація в консоль.
У розмітці JSX компонент обгортається в контейнер із класом edit-page-wrapper. У лівій частині розташоване бічне меню (sidebar-background + sidebar), яке відображає статичні елементи: «Косметичні засоби» (позначено як активно виділена вкладка), «Лікарі», «Пацієнти» та «Акаунт». Цей блок потрібен для навігації по розділах.
Кнопка під формою має атрибут type="button" і клас submit-button. Вона викликає функцію handleUpdate при кліку, що запускає описаний вище PUT-запит. Завдяки цьому користувач не відправляє форму стандартним способом, контролюючи весь процес через JavaScript.
Нижче наведено сам код:

 
 
Рисунок 8 – Перша частина коду сторінки редагування
 
Рисунок 9 – Друга частина коду сторінки редагування

	Результат роботи коду:
 
Рисунок 10 – Вибір продукту
 
Рисунок 11 - Сторінка з таблицею «Продукти»

-	UML діаграма прецедентів (Use Case Diagram); 
 
Рисунок 12 - UML діаграма прецедентів

Посилання на детальний перегляд діаграми:
https://lucid.app/lucidchart/14dde743-352d-455e-8313-463e352e19bb/edit?viewport_loc=-1956%2C894%2C7200%2C3536%2C0_0&invitationId=inv_98cb0e24-0072-42c1-8cfd-212c2eac483b

-	UML діаграма компонентів (Component Diagram).

 
Рисунок 13 - UML діаграма компонентів

Посилання на детальний перегляд діаграми:
https://lucid.app/lucidchart/14dde743-352d-455e-8313-463e352e19bb/edit?viewport_loc=4397%2C2054%2C2775%2C1363%2C0_0&invitationId=inv_98cb0e24-0072-42c1-8cfd-212c2eac483b

-	ER-модель даних
 
Рисунок 14 - ER-модель даних

Посилання на детальний перегляд діаграми:
https://lucid.app/lucidchart/14dde743-352d-455e-8313-463e352e19bb/edit?viewport_loc=-610%2C999%2C7200%2C3536%2C0_0&invitationId=inv_98cb0e24-0072-42c1-8cfd-212c2eac483b

-	UML діаграма станів (State Diagram).

 
Рисунок 15 - UML діаграма станів

Посилання на детальний перегляд діаграми:
https://lucid.app/lucidchart/14dde743-352d-455e-8313-463e352e19bb/edit?viewport_loc=2204%2C2190%2C4662%2C2027%2C0_0&invitationId=inv_98cb0e24-0072-42c1-8cfd-212c2eac483b

Посилання на GitHub:
https://github.com/NureKhapalSofiia/apz-pzpi-22-9-khapal-sofiia/tree/main/Lab3
Посилання на відео з демонстрацією роботи усього функціоналу: https://drive.google.com/drive/folders/1-fWtbwz177J2RsFhYFKuYqUsbr6Ak-ln?usp=sharing

Висновок: під час виконання даної лабораторної робити, я розробила Web застосунок для системи по догляду за шкірою. Крім того підв’язала запланований функціонал.
